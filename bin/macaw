#!/usr/bin/env ruby

require 'yaml'
require 'pp'
require 'macaw'
require 'json/pure'
require 'shellwords'

def error(msg)
  puts msg
  exit 1
end

error("No filename to process") if ARGV.size == 0
error("Expected exactly one filename to process #{ARGV.inspect}") if ARGV.size != 1
if File.file?(ARGV[0])
  TEX = ARGV[0]
elsif File.file?(ARGV[0] + '.tex')
  TEX = ARGV[0] + '.tex'
else
  error("#{ARGV[0].inspect} does not exist") if !File.exists?(ARGV[0])
end

CONFIGFILE = [File.join(Dir.home, 'araraconfig.yaml'), File.join(Dir.home, '.araraconfig.yaml')].detect{|config| File.file?(config) }
CONFIG = CONFIGFILE ? YAML.load_file(CONFIGFILE) : {}

class JSON::Pure::Parser
  IDENTIFIER = /[^:\s\\",{}\[\]]+/i
  alias :parse_quoted_string :parse_string

  def parse_string
    if match?(IDENTIFIER)
      str = scan(IDENTIFIER)
      return true if str == 'yes'
      return false if str == 'no'
      return str
    end

    return parse_quoted_string
  end
end

class Macaw
  def initialize(tex)
    @file = tex
    @base = File.basename(@file, File.extname(@file))
  end

  cattr_accessor :metadata
  def self.rule(*args, &block)
    Macaw.metadata ||= {}

    if args.is_a?(Hash) && args.size == 1
      name = args.keys[0]
      args = args[name]
    elsif args.is_a?(Symbol)
      name = args
      args = nil
    else
      error("unexpected rule definition #{args.inspect}"
    end

    name.intern!

    if args.nil?
      Macaw.metadata[name] = {}
    elsif args.is_a?(Array)
      Macaw.metadata[name] = {req: args}
    elsif args.is_a?(Symbol)
      Macaw.metadata[name] = {req: [args]}
    elsif args.is_a?(Hash) && (args.keys - [:opt, :req]).empty?
      Macaw.metadata[name] = args
    elsif args.is_a?(Hash) && (args.values.uniq - [:opt, :req, true, false]).empty?
      Macaw.metadata[name] = {
        req: args.collect{|k,v| v == :req || v == true}.collect{|k, v| k},
        opt: args.collect{|k,v| v == :opt || v == false}.collect{|k, v| k},
      }
      Macaw.metadata[name].delete(:req) if Macaw.metadata[name][:req].empty?
      Macaw.metadata[name].delete(:opt) if Macaw.metadata[name][:opt].empty?
    else
      error("rule #{name.inspect} has unexpected arguments specification #{args.inspect}"
    end

    [:req, :opt].each{|p|
      Macaw.metadata[name][p] = Macaw.metadata[name][p].collect{|k| k.intern} if Macaw.metadata[name][p]
    }

    define_method(name, block)
  end

  def self.run(file)
    Macaw.load_rules
    macaw = Macaw.new(file)
    IO.readlines(file).each{|line|
      next unless line =~ /^% arara: /
      line.strip!
      line.sub!(/^%\s+arara\s*:\s*/, '')
      data = line.split(':', 2).collect{|v| v.strip}

      cmd = data[0]
      next if cmd == ''

      error('Halted on user request' if cmd == 'halt'

      params = {}
      begin
        params = JSON.parse(data[1]) if data[1]
      rescue => e
        error("cannot parse command #{line.inspect}: #{e}")
      end

      cmd = cmd.intern

      error "no such rule #{cmd}" unless macaw.respond_to?(cmd)

      if Macaw.metadata[cmd][:req]
        missing = Macaw.metadata[cmd][:req] - params.keys.collect{|k| k.intern}
        error("#{line.inspect}: missing required parameters #{missing.inspect}" unless missing.empty?
      end
      if Macaw.metadata[cmd][:opt]
        unexpected = params.keys.collect{|k| k.intern} - [Macaw.metadata[cmd][:req], Macaw.metadata[cmd][:opt].compact.flatten
        error("#{line.inspect}: unexpected parameters #{unexpected.inspect}" unless unexpected.empty?
      end

      macaw.send(cmd, OpenStruct.new(params))
    }
  end

  def self.system(cmd)
    cmd = cmd.compact.join(' ') if cmd.is_a?(Array)
    puts cmd
    output = `#{cmd}`
    puts output
    return output if $?.to_i == 0
    throw "#{cmd}: #{$?}"
  end

  def self.load_rules
    CONFIG['paths'].each{|path| puts path; require_all path} if CONFIG['paths']
  end
end

Macaw.run(TEX)
