#!/usr/bin/env ruby
# encoding: UTF-8

require 'yaml'
require 'pp'
require_relative '../lib/macaw'
require_relative '../lib/macaw/version'
require 'json/pure'
require 'os'
require 'ostruct'
require 'shellwords'
require 'optparse'
require 'timeout'
require 'i18n'
require 'open3'

puts [
' __  __                          ',
'|  \/  | __ _  ___ __ ___      __',
'| |\/| |/ _` |/ __/ _` \ \ /\ / /',
'| |  | | (_| | (_| (_| |\ V  V / ',
'|_|  |_|\__,_|\___\__,_| \_/\_/  ',
'                                 ',
].join("\n")

CONTRIBUTORS = [
  'Alan Munn',
  'Andrew Stacey',
  'Brent Longborough',
  'Clemens Niederberger',
  'David Carlisle',
  'Enrico Gregorio',
  'Francesco Endrici',
  'Gonzalo Medina',
  'Harish Kumar',
  '?lhan Polat',
  'Joseph Wright',
  'Marco Daniel',
  'MikaÎ´l Maunier',
  'Patrick Gundlach',
  'Rasmus Roulund',
  'Sergey Ulyanov',
  'Stefan Kottwitz'
].join(', ')

I18n.enforce_available_locales = true
I18n.load_path = Dir[File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'macaw', 'i18n', '*.yml'))]
I18n.default_locale = :en

def options!
  options = {}
  [true, false].collect{|dryrun|
    opts = OptionParser.new{|parser|
      parser.banner = "#{I18n.t('help.usage')}: macaw [options] FILE"
      parser.separator ""

      options[:language] = I18n.default_locale
      parser.on('-L', '--language LANG', I18n.t('help.Language')){|lang|
        begin
          I18n.locale = lang.intern
          options[:language] = lang.intern
        rescue I18n::InvalidLocale
          if !dryrun
            puts "#{lang.inspect} is not among the supported languages #{I18n.available_locales.inspect}"
            exit
          end
        end
      }

      parser.on('-p', '--progress', I18n.t('help.Progress')) {|v|
        options[:progress] = v
      }
      parser.on('-l', '--log', I18n.t('help.Log')) {|v|
        options[:log] = v
      }

      parser.on('-t', '--timeout MILLISECONDS', I18n.t('help.Timeout')){|timeout|
        options[:timeout] = Float(timeout) / 1000
      }

      parser.on('-v', '--verbose', I18n.t('help.Verbose')) {|v|
        options[:verbose] = v
      }

      parser.on_tail('-h', '--help', '--usage', I18n.t('help.help')){
        if !dryrun
          puts parser.help
          exit
        end
      }

      parser.on_tail('-V', '--version', I18n.t('help.Version')){
        if !dryrun
          puts "macaw #{Macaw::VERSION} - #{I18n.t('header.Slogan')}\nCopyright (c) 2012, Paulo Roberto Massa Cereda\n"
          puts I18n.t('header.AllRightsReserved')
          puts "\n"
          puts I18n.t('msg.SpecialThanks', :contributors => CONTRIBUTORS).gsub(/(.{1,#{60}})(?: +|$)\n?|(.{#{60}})/, "\\1\\2\n")
          exit
        end
      }
    }
    if dryrun
      opts.parse!(ARGV.dup)
    else
      opts.parse!
    end
  }
  OpenStruct.new(options)
end

CONFIGFILE = [File.join(Dir.home, 'araraconfig.yaml'), File.join(Dir.home, '.araraconfig.yaml')].detect{|config| File.file?(config) }
CONFIG = CONFIGFILE ? YAML.load_file(CONFIGFILE) : {}

class String
  def ~
    if OS.windows?
      return '"' + self.gsub('"', '""') + '"'
    else
      return self.shellescape
    end
  end
end

class JSON::Pure::Parser
  IDENTIFIER = /[^:\s\\",{}\[\]]+/i
  alias :parse_quoted_string :parse_string

  def parse_string
    if match?(IDENTIFIER)
      str = scan(IDENTIFIER)
      return true if str == 'yes'
      return false if str == 'no'
      return str
    end

    return parse_quoted_string
  end
end

class Macaw
  class CommandlineError < StandardError; end

  @@log = nil

  def initialize(tex)
    @file = tex
    @base = File.join(File.dirname(@file), File.basename(@file, File.extname(@file)))
  end
  attr_reader :file, :base

  ERRORMODES=[:exit, :throw, :ignore]
  def self.error(msg, onfail=:exit)
    throw "errormode can only be #{ERRORMODES.inspect}" unless ERRORMODES.include?(onfail)
    case onfail
      when :exit
        @@log.close if @@log
        puts "\n\n#{msg}"
        exit 1
      when :throw
        raise CommandlineError, msg
      else
        puts msg
    end
  end

  def self.options
    @@options ||= options!
  end

  def self.run
    @@options ||= options!

    error("No filename to process") if ARGV.size == 0
    error("Expected exactly one filename to process #{ARGV.inspect}") if ARGV.size != 1
    tex = File.file?(ARGV[0]) ? ARGV[0] : ARGV[0] + '.tex'
    error("#{ARGV[0].inspect} does not exist") if !File.exists?(tex)

    Macaw.load_rules
    macaw = Macaw.new(tex)
    @@log = File.open(macaw.base + '.log', 'w') if @@options.log

    IO.readlines(tex).each{|line|
      next unless line =~ /^% arara: /
      line.strip!
      line.sub!(/^%\s+arara\s*:\s*/, '')
      data = line.split(':', 2).collect{|v| v.strip}

      cmd = data[0]
      next if cmd == ''

      error 'Halted on user request' if cmd == 'halt'

      params = {}
      begin
        params = JSON.parse(data[1]) if data[1]
      rescue => e
        error("cannot parse command #{line.inspect}: #{e}")
      end

      cmd = cmd.intern

      error "no such rule #{cmd}" unless macaw.respond_to?(cmd)

      accept = Macaw.instance_method(cmd).parameters
      required = accept.collect{|k, v| k == :req ? v : nil}.compact
      optional = accept.collect{|k, v| k != :req ? v : nil}.compact

      missing = required - params.keys.collect{|k| k.intern}
      error "#{line}: missing required parameter#{missing.size > 1 ? 's' : ''}: #{missing.inspect}" if missing.size > 0

      unexpected = params.keys.collect{|k| k.intern} - (required + optional)
      error "#{line}: unexpected parameter#{unexpected.size > 1 ? 's' : ''}: #{unexpected.inspect}" if unexpected.size > 0

      puts "\n** #{line} **\n"
      macaw.send(cmd, *accept.collect{|k, v| params[v.to_s]})
    }
  end

  def self.log(line, force=false)
    print (options.progress && !force ? '.' : line + "\n") if @@options.verbose || @@options.progress || force
    @@log.write(line) if @@log
  end

  def self.system(cmd, onfail=:exit)
    throw "errormode can only be #{ERRORMODES.inspect}" unless ERRORMODES.include?(onfail)

    cmd = cmd.compact.join(' ') if cmd.is_a?(Array)
    log(cmd)

    output = ''
    begin
      Timeout::timeout(@@options.timeout || 0) {
        Open3.popen2e(cmd) do |stdin, stdout_err, wait_thr|
          while line = stdout_err.gets
            self.log(line)
            output += line + "\n"
          end

          exit_status = wait_thr.value
          error "cmd failed: #{cmd}", onfail unless exit_status.success?
        end
      }
    rescue Timeout::Error
      error "#{cmd}: timed out after #{@@options.timeout} seconds" if failonerror
    end
    return output
  end

  def self.load_rules
    CONFIG['paths'].each{|path| require_all path} if CONFIG['paths']
  end
end

Macaw.run
