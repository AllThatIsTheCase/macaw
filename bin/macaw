#!/usr/bin/env ruby

require 'yaml'
require 'pp'
require 'macaw'
require 'json/pure'
require 'shellwords'

def error(msg)
  puts msg
  exit 1
end

error("No filename to process") if ARGV.size == 0
error("Expected exactly one filename to process #{ARGV.inspect}") if ARGV.size != 1
if File.file?(ARGV[0])
  TEX = ARGV[0]
elsif File.file?(ARGV[0] + '.tex')
  TEX = ARGV[0] + '.tex'
else
  error("#{ARGV[0].inspect} does not exist") if !File.exists?(ARGV[0])
end

CONFIGFILE = [File.join(Dir.home, 'araraconfig.yaml'), File.join(Dir.home, '.araraconfig.yaml')].detect{|config| File.file?(config) }
CONFIG = CONFIGFILE ? YAML.load_file(CONFIGFILE) : {}

class JSON::Pure::Parser
  IDENTIFIER = /[^:\s\\",{}\[\]]+/i
  alias :parse_quoted_string :parse_string

  def parse_string
    if (!match?(/true|false/i) || match?(/(true|false)#{IDENTIFIER}/i)) && match?(IDENTIFIER)
      scan(IDENTIFIER)
    else
      parse_quoted_string
    end
  end
end

class Macaw
  def initialize(tex)
    @file = tex
    @base = File.basename(@file, File.extname(@file))
  end

  def isTrue(p)
    return false if p.nil?
    return p if p == false || p == true
    return true if ['yes', 'true'].include?(p.downcase)
    return false
  end

  def self.run(file)
    Macaw.load_rules
    macaw = Macaw.new(file)
    IO.readlines(file).each{|line|
      next unless line =~ /^% arara: /
      line.strip!
      line.sub!(/^%\s+arara\s*:\s*/, '')
      line = line.split(':', 2).collect{|v| v.strip}

      cmd = line[0]
      next if cmd == ''

      error('Halted on user request' if cmd == 'halt'

      param = nil
      begin
        param = JSON.parse(line[1]) if line[1]
      rescue => e
        error("cannot parse command #{line.join(': ').inspect}: #{e}")
      end

      macaw.send(cmd.intern, OpenStruct.new(param || {}))
    }
  end

  def self.system(cmd)
    puts cmd
    output = `#{cmd}`
    puts output
    return output if $?.to_i == 0
    throw "#{cmd}: #{$?}"
  end

  def self.load_rules
    CONFIG['paths'].each{|path| puts path; require_all path} if CONFIG['paths']
  end
end

Macaw.run(TEX)
