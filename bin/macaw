#!/usr/bin/env ruby

require 'yaml'
require 'pp'
require 'macaw'
require 'json/pure'
require 'shellwords'

def error(msg)
  puts msg
  exit 1
end

error("No filename to process") if ARGV.size == 0
error("Expected exactly one filename to process #{ARGV.inspect}") if ARGV.size != 1
if File.file?(ARGV[0])
  TEX = ARGV[0]
elsif File.file?(ARGV[0] + '.tex')
  TEX = ARGV[0] + '.tex'
else
  error("#{ARGV[0].inspect} does not exist") if !File.exists?(ARGV[0])
end

CONFIGFILE = [File.join(Dir.home, 'araraconfig.yaml'), File.join(Dir.home, '.araraconfig.yaml')].detect{|config| File.file?(config) }
CONFIG = CONFIGFILE ? YAML.load_file(CONFIGFILE) : {}

class String
  def ~
    if os.windows?
      return '"' + self.gsub('"', '""') + '"'
    else
      return self.shellescape
    end
  end
end

class JSON::Pure::Parser
  IDENTIFIER = /[^:\s\\",{}\[\]]+/i
  alias :parse_quoted_string :parse_string

  def parse_string
    if match?(IDENTIFIER)
      str = scan(IDENTIFIER)
      return true if str == 'yes'
      return false if str == 'no'
      return str
    end

    return parse_quoted_string
  end
end

class Macaw
  def initialize(tex)
    @file = tex
    @base = File.basename(@file, File.extname(@file))
  end

  def self.run(file)
    Macaw.load_rules
    macaw = Macaw.new(file)
    IO.readlines(file).each{|line|
      next unless line =~ /^% arara: /
      line.strip!
      line.sub!(/^%\s+arara\s*:\s*/, '')
      data = line.split(':', 2).collect{|v| v.strip}

      cmd = data[0]
      next if cmd == ''

      error 'Halted on user request' if cmd == 'halt'

      params = {}
      begin
        params = JSON.parse(data[1]) if data[1]
      rescue => e
        error("cannot parse command #{line.inspect}: #{e}")
      end

      cmd = cmd.intern

      error "no such rule #{cmd}" unless macaw.respond_to?(cmd)

      accept = Macaw.instance_method(cmd).parameters
      required = accept.collect{|k, v| k == :req ? v : nil}.compact
      optional = accept.collect{|k, v| k != :req ? v : nil}.compact

      missing = required - params.keys.collect{|k| k.intern}
      error "#{line}: missing required parameter#{missing.size > 1 ? 's' : ''}: #{missing.inspect}" if missing.size > 0

      unexpected = params.keys.collect{|k| k.intern} - (required + optional)
      error "#{line}: unexpected parameter#{unexpected.size > 1 ? 's' : ''}: #{unexpected.inspect}" if unexpected.size > 0

      macaw.send(cmd, *accept.collect{|k, v| params[v.to_s]})
    }
  end

  def !(value)
    if os.windows?
      return '"' + value.to_s.gsub('"', '""') + '"'
    else
      return value.to_s.shellescape
    end
  end

  def self.system(cmd)
    cmd = cmd.compact.join(' ') if cmd.is_a?(Array)
    puts cmd
    output = `#{cmd}`
    puts output
    return output if $?.to_i == 0
    throw "#{cmd}: #{$?}"
  end

  def self.load_rules
    CONFIG['paths'].each{|path| puts path; require_all path} if CONFIG['paths']
  end
end

Macaw.run(TEX)
